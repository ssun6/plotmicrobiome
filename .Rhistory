taxa_level="phylum"
xlab_direction=1
legend_size=1
palette_group=="default"
palette_group="default"
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
palette_group=sample(col_vector, num_taxa+1)
metadata=metadata[which(!is.na(metadata[,test_metadata])),]
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
tab1n=tab1[which(tax_l==level_n[match(taxa_level,level1)]),]
tab1n=t(t(tab1n)/colSums(tab1n))*100
tab1n=tab1n[order(rowSums(tab1n),decreasing = T),]
tab1n_c=data.frame(sapply(by(t(tab1n),metadata[,test_metadata],colMeans),identity))
rownames(tab1n_c)=sapply(strsplit(rownames(tab1n_c),"--"),"[[",level_n[match(taxa_level,level1)])
tab1n_c1=tab1n_c[1:num_taxa,]
other=colSums(tab1n_c)-colSums(tab1n_c1)
tab1n_c2=rbind(tab1n_c1,other)
rownames(tab1n_c2)[num_taxa+1]="Other"
par(mfrow=c(2,1))
barplot(as.matrix(tab1n_c2),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c2)),col=rev(palette_group[1:(num_taxa+1)]),pch=15,bty="n",cex=legend_size)
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c2),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c2)),col=rev(palette_group[1:(num_taxa+1)]),pch=15,bty="n",cex=legend_size)
dim(tab1)
dim(metadata)
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
tab1n=tab1[which(tax_l==level_n[match(taxa_level,level1)]),]
dim(tab1n)
tab1n=t(t(tab1n)/colSums(tab1n))*100
tab1n=tab1n[order(rowSums(tab1n),decreasing = T),]
tab1n_c=data.frame(sapply(by(t(tab1n),metadata[,test_metadata],colMeans),identity))
tab1n_c
rownames(tab1n_c)=sapply(strsplit(rownames(tab1n_c),"--"),"[[",level_n[match(taxa_level,level1)])
tab1n_c
tab1n_c1=tab1n_c[1:num_taxa,]
num_taxa
dim(tab1n_c)
nrow(tab1n_c)
num_taxa
rownames(tab1n_c)=sapply(strsplit(rownames(tab1n_c),"--"),"[[",level_n[match(taxa_level,level1)])
if(num_taxa>nrow(tab1n_c)){
num_taxa=nrow(tab1n_c)
}
num_taxa
tab1n_c1=tab1n_c[1:num_taxa,]
other=colSums(tab1n_c)-colSums(tab1n_c1)
tab1n_c2=rbind(tab1n_c1,other)
rownames(tab1n_c)=sapply(strsplit(rownames(tab1n_c),"--"),"[[",level_n[match(taxa_level,level1)])
if(num_taxa>nrow(tab1n_c)){
num_taxa=nrow(tab1n_c)
tab1n_c2=tab1n_c
}else{
tab1n_c1=tab1n_c[1:num_taxa,]
other=colSums(tab1n_c)-colSums(tab1n_c1)
tab1n_c2=rbind(tab1n_c1,other)
rownames(tab1n_c2)[num_taxa+1]="Other"
}
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c2),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c2)),col=rev(palette_group[1:(num_taxa+1)]),pch=15,bty="n",cex=legend_size)
num_taxa=nrow(tab1n_c)
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c)),col=rev(palette_group[1:num_taxa]),pch=15,bty="n",cex=legend_size)
brewer.pal.info
brewer.pal.info[brewer.pal.info$category == 'qual',]
unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
palette_group=sample(col_vector, num_taxa+1)
num_taxa=nrow(tab1n_c)
palette_group=palette_group[1:num_taxa]
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c)),col=rev(palette_group[1:num_taxa]),pch=15,bty="n",cex=legend_size)
#' Boxplots of individual taxa with stats
#' @keywords individual taxa, boxplot, stats
#' @export
#' @examples
#'
library(RColorBrewer)
taxa_barplot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1,palette_group="default"){
metadata=metadata[which(!is.na(metadata[,test_metadata])),]
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
tab1n=tab1[which(tax_l==level_n[match(taxa_level,level1)]),]
tab1n=t(t(tab1n)/colSums(tab1n))*100
tab1n=tab1n[order(rowSums(tab1n),decreasing = T),]
tab1n_c=data.frame(sapply(by(t(tab1n),metadata[,test_metadata],colMeans),identity))
if(length(palette_group)==1){
if(palette_group=="default"){
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
palette_group=sample(col_vector, num_taxa+1)
}else{
warning("More colors are needed")
}
}else{
palette_group=palette_group
}
rownames(tab1n_c)=sapply(strsplit(rownames(tab1n_c),"--"),"[[",level_n[match(taxa_level,level1)])
if(num_taxa>nrow(tab1n_c)){
num_taxa=nrow(tab1n_c)
palette_group=palette_group[1:num_taxa]
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c)),col=rev(palette_group[1:num_taxa]),pch=15,bty="n",cex=legend_size)
}else{
tab1n_c1=tab1n_c[1:num_taxa,]
other=colSums(tab1n_c)-colSums(tab1n_c1)
tab1n_c2=rbind(tab1n_c1,other)
rownames(tab1n_c2)[num_taxa+1]="Other"
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c2),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c2)),col=rev(palette_group[1:(num_taxa+1)]),pch=15,bty="n",cex=legend_size)
}
}
#taxa_barplot
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1)
#taxa_barplot
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1)
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="genus",xlab_direction=1,legend_size=1)
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="genus",xlab_direction=1,legend_size=1)
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="genus",xlab_direction=1,legend_size=1)
taxa_barplot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1,palette_group="default"){
metadata=metadata[which(!is.na(metadata[,test_metadata])),]
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
tab1n=tab1[which(tax_l==level_n[match(taxa_level,level1)]),]
tab1n=t(t(tab1n)/colSums(tab1n))*100
tab1n=tab1n[order(rowSums(tab1n),decreasing = T),]
tab1n_c=data.frame(sapply(by(t(tab1n),metadata[,test_metadata],colMeans),identity))
if(length(palette_group)==1){
if(palette_group=="default"){
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
palette_group=col_vector[1:(num_taxa+1)]
}else{
warning("More colors are needed")
}
}else{
palette_group=palette_group
}
rownames(tab1n_c)=sapply(strsplit(rownames(tab1n_c),"--"),"[[",level_n[match(taxa_level,level1)])
if(num_taxa>nrow(tab1n_c)){
num_taxa=nrow(tab1n_c)
palette_group=palette_group[1:num_taxa]
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c)),col=rev(palette_group[1:num_taxa]),pch=15,bty="n",cex=legend_size)
}else{
tab1n_c1=tab1n_c[1:num_taxa,]
other=colSums(tab1n_c)-colSums(tab1n_c1)
tab1n_c2=rbind(tab1n_c1,other)
rownames(tab1n_c2)[num_taxa+1]="Other"
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c2),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c2)),col=rev(palette_group[1:(num_taxa+1)]),pch=15,bty="n",cex=legend_size)
}
}
#taxa_barplot
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1)
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="genus",xlab_direction=1,legend_size=1)
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",palette_group=c("red","blue","orange","green"))
library("plotmicrobiome")
setwd("/Users/shansun/git/plotmicrobiome")
#mutliple taxonomic tables, for example, with one for each level
taxa_table1=format_asv(taxa_file = "./data-raw/multiple_tsv",biom=F,onefile = F,ASV=F)
#mutliple taxonomic tables in biom formats, for example, with one for each level
taxa_table2=format_asv(taxa_file = "./data-raw/multiple_biom",biom=T,onefile = F,ASV=F)
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
taxa_table3=format_asv(taxa_file = "./data-raw/biom_taxonomy.biom",biom=T,onefile = T,ASV=T)
#ASV table (text) from DADA2 with the taxonomy listed as the last column
taxa_table4=format_asv(taxa_file = "./data-raw/table_taxonomy.txt",biom=F,onefile = T,ASV=T)
#One taxonomic table (test) with all levels
taxa_table5=format_asv(taxa_file = "./data-raw/taxa_all.csv",sep=",",biom=F,onefile = T,ASV=F)
taxa_table6=format_asv(taxa_file = "./data-raw/taxa_all.txt",sep="\t",biom=F,onefile = T,ASV=F)
#One taxonomic table (biom) with all levels
taxa_table7=format_asv(taxa_file = "./data-raw/table.from_txt_hdf5.biom",biom=T,onefile = T,ASV=F)
taxa_table8=format_asv(taxa_file = "./data-raw/table.from_txt_json.biom",biom=T,onefile = T,ASV=F)
taxa_table="./data-raw/biom_taxonomy.biom"
metadata_dir="./data-raw/metadata_cafe.csv"
#format the raw taxonomic abudance table
taxa_tab1=format_asv(taxa_file = taxa_table,biom=T,onefile = T,ASV=T)
#format metadata
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=2)
#subset the abundance table to only include samples for test
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="Study",stratify_by_value="Sugar")
#perform statistical test for Timepoint
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="Timepoint",method="wilcoxon")
#tree plot
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="Timepoint",fdr_cutoff=0.1)
plot1
metadata_dir="./data-raw/metadata_mali.csv"
#format the raw taxonomic abudance table
taxa_table="./data-raw/mali_phlan2.txt"
taxa_tab1=format_wgs(taxa_file = taxa_table,method="metaphlan")
#format metadata
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=1)
#subset the abundance table to only include samples for test
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="time",stratify_by_value="1")
#perform statistical test
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="group",method="wilcoxon")
#tree plot
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="group",fdr_cutoff=0.1)
plot1
#PCoA plot
mds_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",method_mds = "pcoa",palette_group=c("red","blue","orange","green"),distance_type="bray")
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",palette_group=c("red","blue","orange","green"))
#taxa_barplot
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1)
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="genus",xlab_direction=1,legend_size=1)
#test
devtools::install_github("ssun6/plotmicrobiome")
library(plotmicrobiome)
#mutliple taxonomic tables, for example, with one for each level
taxa_table1=format_asv(taxa_file = "./data-raw/multiple_tsv",biom=F,onefile = F,ASV=F)
#mutliple taxonomic tables in biom formats, for example, with one for each level
taxa_table2=format_asv(taxa_file = "./data-raw/multiple_biom",biom=T,onefile = F,ASV=F)
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
taxa_table3=format_asv(taxa_file = "./data-raw/biom_taxonomy.biom",biom=T,onefile = T,ASV=T)
#ASV table (text) from DADA2 with the taxonomy listed as the last column
taxa_table4=format_asv(taxa_file = "./data-raw/table_taxonomy.txt",biom=F,onefile = T,ASV=T)
#One taxonomic table (test) with all levels
taxa_table5=format_asv(taxa_file = "./data-raw/taxa_all.csv",sep=",",biom=F,onefile = T,ASV=F)
taxa_table6=format_asv(taxa_file = "./data-raw/taxa_all.txt",sep="\t",biom=F,onefile = T,ASV=F)
#One taxonomic table (biom) with all levels
taxa_table7=format_asv(taxa_file = "./data-raw/table.from_txt_hdf5.biom",biom=T,onefile = T,ASV=F)
taxa_table8=format_asv(taxa_file = "./data-raw/table.from_txt_json.biom",biom=T,onefile = T,ASV=F)
taxa_table="./data-raw/biom_taxonomy.biom"
metadata_dir="./data-raw/metadata_cafe.csv"
#format the raw taxonomic abudance table
taxa_tab1=format_asv(taxa_file = taxa_table,biom=T,onefile = T,ASV=T)
#format metadata
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=2)
#subset the abundance table to only include samples for test
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="Study",stratify_by_value="Sugar")
#perform statistical test for Timepoint
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="Timepoint",method="wilcoxon")
#tree plot
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="Timepoint",fdr_cutoff=0.1)
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="Timepoint",fdr_cutoff=0.05)
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="Timepoint",fdr_cutoff=0.01)
#perform correlation test for test_score
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="test_score",method="spearman")
#tree plot
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="test_score",test_metadata_continuous=T,fdr_cutoff=0.3)
plot1
#test
devtools::install_github("ssun6/plotmicrobiome")
setwd("/Users/shansun/git/plotmicrobiome")
library(plotmicrobiome)
#mutliple taxonomic tables, for example, with one for each level
taxa_table1=format_asv(taxa_file = "./data-raw/multiple_tsv",biom=F,onefile = F,ASV=F)
#mutliple taxonomic tables in biom formats, for example, with one for each level
taxa_table2=format_asv(taxa_file = "./data-raw/multiple_biom",biom=T,onefile = F,ASV=F)
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
taxa_table3=format_asv(taxa_file = "./data-raw/biom_taxonomy.biom",biom=T,onefile = T,ASV=T)
#ASV table (text) from DADA2 with the taxonomy listed as the last column
taxa_table4=format_asv(taxa_file = "./data-raw/table_taxonomy.txt",biom=F,onefile = T,ASV=T)
#One taxonomic table (test) with all levels
taxa_table5=format_asv(taxa_file = "./data-raw/taxa_all.csv",sep=",",biom=F,onefile = T,ASV=F)
taxa_table6=format_asv(taxa_file = "./data-raw/taxa_all.txt",sep="\t",biom=F,onefile = T,ASV=F)
#One taxonomic table (biom) with all levels
taxa_table7=format_asv(taxa_file = "./data-raw/table.from_txt_hdf5.biom",biom=T,onefile = T,ASV=F)
taxa_table8=format_asv(taxa_file = "./data-raw/table.from_txt_json.biom",biom=T,onefile = T,ASV=F)
taxa_table="./data-raw/biom_taxonomy.biom"
metadata_dir="./data-raw/metadata_cafe.csv"
#format the raw taxonomic abudance table
taxa_tab1=format_asv(taxa_file = taxa_table,biom=T,onefile = T,ASV=T)
#format metadata
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=2)
#subset the abundance table to only include samples for test
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="Study",stratify_by_value="Sugar")
#perform statistical test for Timepoint
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="Timepoint",method="wilcoxon")
#tree plot
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="Timepoint",fdr_cutoff=0.1)
plot1
#perform correlation test for test_score
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="test_score",method="spearman")
#tree plot
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="test_score",test_metadata_continuous=T,fdr_cutoff=0.3)
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="test_score",test_metadata_continuous=T,fdr_cutoff=0.4)
plot1
#cor_plot
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="test_score",col_metadata="Timepoint",fdr_cutoff=0.3)
cor_plot1
#Metaphlan2 and Kraken2 results
taxa_table9=format_wgs(taxa_file = "./data-raw/mali_kraken2.txt")
taxa_table10=format_wgs(taxa_file = "./data-raw/mali_phlan2.txt")
metadata_dir="./data-raw/metadata_mali.csv"
#format the raw taxonomic abudance table
taxa_table="./data-raw/mali_phlan2.txt"
taxa_tab1=format_wgs(taxa_file = taxa_table,method="metaphlan")
taxa_table="./data-raw/mali_kraken2.txt"
taxa_tab1=format_wgs(taxa_file = taxa_table,method="kraken")
#format metadata
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=1)
#subset the abundance table to only include samples for test
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="time",stratify_by_value="1")
#perform statistical test
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="group",method="wilcoxon")
#tree plot
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="group",fdr_cutoff=0.1)
plot1=tree_view(taxa_table =tab_s, metadata=metadata1,fdrs=fdrs1,test_metadata="group",fdr_cutoff=0.000001)
plot1
#PCoA plot
mds_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",method_mds = "pcoa",palette_group=c("red","blue","orange","green"),distance_type="bray")
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",palette_group=c("red","blue","orange","green"))
#taxa_barplot
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1)
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",num_taxa=10,taxa_level="genus",xlab_direction=1,legend_size=1)
#taxa boxplot
taxa_boxplot(taxa_table = tab_s, metadata=metadata1,test_metadata="group",fdrs=fdrs1,log_norm=T,cutoff=0.01,palette_group=c("red","blue","orange","green"))
#pathway data
path_table="./data-raw/humann2_mali_unstratified.txt"
path_tab1=format_pathway(taxa_file = path_table,sep="\t")
colnames(path_tab1)=sapply(strsplit(colnames(path_tab1),"_S"),"[[",1)
metadata_dir="./data-raw/metadata_mali.csv"
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=1)
tab_s=table_subset(taxa_table = path_tab1,metadata=metadata1,stratify_by_metadata="time",stratify_by_value="1",taxa_file=F)
#PCoA plot
mds_plot(taxa_table = tab_s, metadata=metadata1,one_level=T,test_metadata="group",method_mds = "pcoa",palette_group=c("red","blue","orange","green"),distance_type="bray")
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,one_level=T,test_metadata="group",palette_group=c("red","blue","orange","green"))
#taxa boxplot
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="group",method="wilcoxon")
taxa_boxplot(taxa_table = tab_s, metadata=metadata1,one_level=T,test_metadata="group",fdrs=fdrs1,log_norm=T,cutoff=0.01,palette_group=c("red","blue","orange","green"))
metadata_dir="/Users/shansun/Google\ Drive/mc_set1/metadata_parsed.csv"
taxa_dir1="/Users/shansun/Google\ Drive/mc_set1/set1/biom-with-taxonomy.biom"
taxa_dir2="/Users/shansun/Google\ Drive/mc_set1/set2/dada2/biom-with-taxonomy.biom"
#format the raw taxonomic abudance table
taxa_tab1=format_asv(taxa_file = taxa_dir1,biom=T,onefile = T,ASV=T)
taxa_tab2=format_asv(taxa_file = taxa_dir2,biom=T,onefile = T,ASV=T)
#overlap "M14705_DES" "M14912_DES"
taxa_tab2=taxa_tab2[,!grepl("M14705_DES",colnames(taxa_tab2))]
taxa_tab2=taxa_tab2[,!grepl("M14912_DES",colnames(taxa_tab2))]
colnames(taxa_tab1)=gsub("\\.","",colnames(taxa_tab1))
colnames(taxa_tab1)=paste(substr(colnames(taxa_tab1),1,6),substr(colnames(taxa_tab1),7,9),sep="_")
taxa_tab3=merge(taxa_tab1,taxa_tab2,by=0,all=T)
rownames(taxa_tab3)=taxa_tab3[,1]
taxa_tab3=taxa_tab3[,-1]
taxa_tab3[is.na(taxa_tab3)]=0
taxa_tab3=t(t(taxa_tab3)/colSums(taxa_tab3))*mean(colSums(taxa_tab3))
#format metadata
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=1)
metadata2=metadata1
metadata1$location="ASC"
rownames(metadata1)=paste(rownames(metadata1),"ASC",sep="_")
metadata2$location="DES"
rownames(metadata2)=paste(rownames(metadata2),"DES",sep="_")
metadata3=rbind(metadata1,metadata2)
metadata3$batch=rep(NA,nrow(metadata3))
metadata3$batch[which(rownames(metadata3)%in%colnames(taxa_tab1))]=1
metadata3$batch[which(rownames(metadata3)%in%colnames(taxa_tab2))]=2
metadata_dir="/Users/shansun/Google\ Drive/mc_set1/metadata_combined.csv"
taxa_dir="/Users/shansun/Google\ Drive/mc_set1/taxa_combined.csv"
#format data
taxa_tab1=format_asv(taxa_file = taxa_dir,biom=F,onefile = T,ASV=F,sep=",")
#format metadata
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=1)
#subset the abundance table to only include samples for test
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="",stratify_by_value="",prevalence_cutoff=0.1, abundance_cutoff=0)
#perform statistical test
fdrs1=stat_test(taxa_table =tab_s,metadata=metadata1,test_metadata="Case_Ctrl",method="wilcoxon")
#tree plot
plot1=tree_view(taxa_table =taxa_tab1, metadata=metadata1,fdrs=fdrs1,test_metadata="Case_Ctrl",prevalence_cutoff=0.1, abundance_cutoff=0)
plot1
#PCoA plot
mds_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",method_mds = "pcoa",palette_group=c("red","blue","orange","green"),distance_type="bray")
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",palette_group=c("red","blue","orange","green"))
#taxa boxplot
taxa_boxplot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",fdrs=fdrs1,log_norm=T,cutoff=0.01,page=1,palette_group=c("red","blue","orange","green"))
#cor_plot
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="patient_age",col_metadata="Case_Ctrl",fdr_cutoff=0.1)
cor_plot1
mds_plot=function(taxa_table = NULL, one_level=F, metadata=NULL,test_metadata=NULL,log_norm=F,taxa_level="genus",method_mds="pcoa",distance_type="bray",palette_group=c("red","blue","orange","green")){
metadata=metadata[which(!is.na(metadata[,test_metadata])),]
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
if(log_norm){
tab1=log10(tab1+1)
}
if (one_level){
ado_p1=as.numeric(unlist(vegan::adonis(t(tab1)~metadata[,test_metadata])$"aov.tab"[1,5:6]))
if(method_mds=="pcoa"){
par(mfrow=c(3,1),mar=c(5,5,5,5))
gen_mds=vegan::capscale(t(tab1)~1,distance=distance_type)
var_per=round((gen_mds$CA$eig/sum(gen_mds$CA$eig))[1:6]*100,2)
mds_p=paste("PCoA",c(1:6)," (",var_per,"%)",sep="")
main1=paste(test_metadata,"R2 =",round(ado_p1[1],5)," P=",ado_p1[2])
for (j in c(1,3,5)){
pcoa12=vegan::ordiplot(gen_mds,choices=c(j,j+1),type="none",cex.lab=1.5,xlab=mds_p[j],ylab=mds_p[j+1],main=main1,
xlim=c(min(summary(gen_mds)$sites[,j])-0.3,max(summary(gen_mds)$sites[,j])+0.3),ylim=c(min(summary(gen_mds)$sites[,j+1])-0.3,max(summary(gen_mds)$sites[,j+1])+0.3))
col3=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))][factor(metadata[,test_metadata])]
pch1=16
points(pcoa12,"sites",col=adjustcolor(col3, alpha.f = 0.3),pch=pch1,cex=1.5)
for (m in 1:length(levels(metadata[,test_metadata]))){
vegan::ordiellipse(pcoa12, metadata[,test_metadata], kind="se", conf=0.95, lwd=1, draw = "lines", col=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))][m],show.groups=levels(metadata[,test_metadata])[m],label=T,font=2,cex=1.3)
}
legend("topright",levels(factor(metadata[,test_metadata])), cex=1.2, bty="n", col=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))], pch=16)
}
}else if (method_mds=="nmds"){
par(mfrow=c(1,1),mar=c(5,5,5,5))
gen_mds=vegan::metaMDS(t(tab1),distance=distance_type)
mds_p=paste("NMDS",c(1:2),sep="")
main1=paste(test_metadata,"R2 =",round(ado_p1[1],5)," P=",ado_p1[2],"\nstress =",round(gen_mds$grstress,5))
pcoa12=vegan::ordiplot(gen_mds,type="none",cex.lab=1.5,xlab=mds_p[1],ylab=mds_p[2],main=main1,xlim=c(min(gen_mds$points[,1])-0.3,max(gen_mds$points[,1])+0.3),ylim=c(min(gen_mds$points[,2])-0.3,max(gen_mds$points[,2])+0.3))
col3=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))][factor(metadata[,test_metadata])]
pch1=16
points(pcoa12,"sites",col=adjustcolor(col3, alpha.f = 0.3),pch=pch1,cex=1.5)
for (j in 1:length(levels(metadata[,test_metadata]))){
vegan::ordiellipse(pcoa12, metadata[,test_metadata], kind="se", conf=0.95, lwd=1, draw = "lines", col=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))][j],show.groups=levels(metadata[,test_metadata])[j],label=T,font=2,cex=1.3)
}
legend("topright",levels(factor(metadata[,test_metadata])), cex=1.2, bty="n", col=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))], pch=16)
}else{
stop("Please use pcoa or nmds for method_mds")
}
}
else{
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","ASV/strain")
level_n=c(1:8)
tab1n=tab1[which(tax_l==level_n[match(taxa_level,level1)]),]
if (taxa_level=="strain" | taxa_level=="ASV"){
tab1n=tab1[which(tax_l==8),]
}
ado_p1=as.numeric(unlist(vegan::adonis(t(tab1n)~metadata[,test_metadata])$"aov.tab"[1,5:6]))
if(method_mds=="pcoa"){
par(mfrow=c(3,1),mar=c(5,5,5,5))
gen_mds=vegan::capscale(t(tab1n)~1,distance=distance_type)
var_per=round((gen_mds$CA$eig/sum(gen_mds$CA$eig))[1:6]*100,2)
mds_p=paste("PCoA",c(1:6)," (",var_per,"%)",sep="")
main1=paste(test_metadata,"R2 =",round(ado_p1[1],5)," P=",ado_p1[2])
for (j in c(1,3,5)){
pcoa12=vegan::ordiplot(gen_mds,choices=c(j,j+1),type="none",cex.lab=1.5,xlab=mds_p[j],ylab=mds_p[j+1],main=main1,
xlim=c(min(summary(gen_mds)$sites[,j])-0.3,max(summary(gen_mds)$sites[,j])+0.3),ylim=c(min(summary(gen_mds)$sites[,j+1])-0.3,max(summary(gen_mds)$sites[,j+1])+0.3))
col3=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))][factor(metadata[,test_metadata])]
pch1=16
points(pcoa12,"sites",col=adjustcolor(col3, alpha.f = 0.3),pch=pch1,cex=1.5)
for (m in 1:length(levels(metadata[,test_metadata]))){
vegan::ordiellipse(pcoa12, metadata[,test_metadata], kind="se", conf=0.95, lwd=1, draw = "lines", col=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))][m],show.groups=levels(metadata[,test_metadata])[m],label=T,font=2,cex=1.3)
}
legend("topright",levels(factor(metadata[,test_metadata])), cex=1.2, bty="n", col=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))], pch=16)
}
}else if (method_mds=="nmds"){
par(mfrow=c(1,1),mar=c(5,5,5,5))
gen_mds=vegan::metaMDS(t(tab1n),distance=distance_type)
mds_p=paste("NMDS",c(1:2),sep="")
main1=paste(test_metadata,"R2 =",round(ado_p1[1],5)," P=",ado_p1[2],"\nstress =",round(gen_mds$grstress,5))
pcoa12=vegan::ordiplot(gen_mds,type="none",cex.lab=1.5,xlab=mds_p[1],ylab=mds_p[2],main=main1,xlim=c(min(gen_mds$points[,1])-0.3,max(gen_mds$points[,1])+0.3),ylim=c(min(gen_mds$points[,2])-0.3,max(gen_mds$points[,2])+0.3))
col3=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))][factor(metadata[,test_metadata])]
pch1=16
points(pcoa12,"sites",col=adjustcolor(col3, alpha.f = 0.3),pch=pch1,cex=1.5)
for (j in 1:length(levels(metadata[,test_metadata]))){
vegan::ordiellipse(pcoa12, metadata[,test_metadata], kind="se", conf=0.95, lwd=1, draw = "lines", col=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))][j],show.groups=levels(metadata[,test_metadata])[j],label=T,font=2,cex=1.3)
}
legend("topright",levels(factor(metadata[,test_metadata])), cex=1.2, bty="n", col=palette_group[match(levels(metadata[,test_metadata]),levels(metadata[,test_metadata]))], pch=16)
}else{
stop("Please use pcoa or nmds for method_mds")
}
}
}
#pathway data
path_table="./data-raw/humann2_mali_unstratified.txt"
path_tab1=format_pathway(taxa_file = path_table,sep="\t")
colnames(path_tab1)=sapply(strsplit(colnames(path_tab1),"_S"),"[[",1)
metadata_dir="./data-raw/metadata_mali.csv"
metadata1=meta_format(metadata=metadata_dir,metadata_sep=",",meta_sample_name_col=1)
tab_s=table_subset(taxa_table = path_tab1,metadata=metadata1,stratify_by_metadata="time",stratify_by_value="1",taxa_file=F)
#PCoA plot
mds_plot(taxa_table = tab_s, metadata=metadata1,one_level=T,test_metadata="group",method_mds = "pcoa",palette_group=c("red","blue","orange","green"),distance_type="bray")
mds_plot(taxa_table = tab_s, metadata=metadata1,one_level=T,log_norm=T,test_metadata="group",method_mds = "pcoa",palette_group=c("red","blue","orange","green"),distance_type="bray")
