}else{
tab1=tab[grep(taxa_shown,rownames(tab)),]
fdrs1=fdrs[grep(taxa_shown,rownames(fdrs)),]
}
sig_l=length(which(fdrs1[,2]<cutoff))
tab1n=tab1[order(fdrs1[,2]),][1:sig_l,]
fdrs_s=sort(fdrs1[,2])[1:sig_l]
if(log_norm){
tab1n=log10(tab1n+1)
}
i=1
tax_name=paste0("p__",strsplit(rownames(tab1n)[i],"--p__")[[1]][2])
if(nchar(tax_name)>60&nchar(tax_name)<100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_li=round(tax_l/2)
tax_name1=paste0(paste(tax_s[1:tax_li],collapse = ";"),"\n",paste(tax_s[(tax_li+1):tax_l],collapse = ";"))
}else if(nchar(tax_name)>=100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_name1=paste0(paste(tax_s[1:3],collapse = ";"),"\n",paste(tax_s[4:5],collapse = ";"),"\n",paste(tax_s[6:tax_l],collapse = ";"))
}else{
tax_name1=tax_name
}
if(fdrs_s[i]<0.001){
wil_p=formatC(fdrs_s[i], format = "e", digits = 2)
}else{
wil_p=formatC(fdrs_s[i], digits = 2)
}
boxplot(tab1n[i,]~metadata[,test_metadata],main=paste(tax_name1,"\nFDR =",wil_p),border=palette_group,col="white",xlab=test_metadata,ylab="normalized abundance",cex.main=0.8,las=xlab_direction)
stripchart(tab1n[i,]~metadata[,test_metadata],vertical = TRUE,  method = "jitter", add = TRUE, pch = 16, col = palette_group)
metadata=metadata[which(!is.na(metadata[[test_metadata]])),]
metadata=metadata[which(!is.na(metadata[[col_metadata]])),]
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
map1=metadata[intersect(colnames(tab1),rownames(metadata)),]
if(taxa_shown==""){
tab1=tab1
}else{
tab1=tab1[grep(taxa_shown,rownames(tab1)),]
}
cor_mat=matrix(nrow=nrow(tab1),ncol=2)
for (j in 1:nrow(tab1)){
cor1=cor.test(tab1[j,],map1[,test_metadata],method=cor_method)
cor_mat[j,1]=cor1$estimate
cor_mat[j,2]=cor1$p.value
}
cor_mat=data.frame(cor_mat)
cor_mat$fdr=p.adjust(cor_mat[,2],method="fdr")
rownames(cor_mat)=rownames(tab1)
cor_mat=cor_mat[order(cor_mat[,3]),]
cor_mat=na.omit(cor_mat)
k=1
gplots1=list()
for (j in 1:nrow(cor_mat)){
if (cor_mat[j,3]<fdr_cutoff){
if(log_norm){
tab_s=log10(tab1+1)
xlab1="log10 (normalized abundance)"
}else{
tab_s=tab1
xlab1="normalized abundance"
}
map1$i=tab_s[rownames(cor_mat)[j],]
colnames(map1)[match(test_metadata,colnames(map1))]="test_metadata"
colnames(map1)[match(col_metadata,colnames(map1))]="col_metadata"
tax_name=paste0("p__",strsplit(rownames(cor_mat)[j],"--p__")[[1]][2])
if(nchar(tax_name)>60&nchar(tax_name)<100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_li=round(tax_l/2)
tax_name1=paste0(paste(tax_s[1:tax_li],collapse = ";"),"\n",paste(tax_s[(tax_li+1):tax_l],collapse = ";"))
}else if(nchar(tax_name)>=100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_name1=paste0(paste(tax_s[1:3],collapse = ";"),"\n",paste(tax_s[4:5],collapse = ";"),"\n",paste(tax_s[6:tax_l],collapse = ";"))
}else{
tax_name1=tax_name
}
if(cor_mat[j,3]<0.001){
wil_p=formatC(cor_mat[j,3], format = "e", digits = 2)
}else{
wil_p=formatC(cor_mat[j,3], digits = 3)
}
main1=paste(tax_name1,"\n"," rho =",round(cor_mat[j,1],3),"\n FDR =", wil_p,"\n")
g=ggscatter(map1, x = "i", y = "test_metadata",xlab = xlab1, ylab = test_metadata,
legend.title=col_metadata,font.x = c(10, "black"),font.y = c(10,  "black"), color = "col_metadata",palette = palette_group, size = 2,
add = "reg.line",add.params = list(color = "darkgrey", fill = "lightgray"),conf.int = TRUE,cor.coef = FALSE )
gplots1[[k]]=g+annotate(geom="text", x=min(map1$i)+sd(map1$i)*1.2, y=max(map1$test_metadata)-sd(map1$test_metadata)*0.5, label=main1,color="black",size=3)
k=k+1
}
}
taxa_table =tab_s
metadata=metadata1
test_metadata="patient_age"
col_metadata="Case_Ctrl"
fdr_cutoff=0.1
metadata=metadata[which(!is.na(metadata[[test_metadata]])),]
metadata=metadata[which(!is.na(metadata[[col_metadata]])),]
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
map1=metadata[intersect(colnames(tab1),rownames(metadata)),]
if(taxa_shown==""){
tab1=tab1
}else{
tab1=tab1[grep(taxa_shown,rownames(tab1)),]
}
cor_mat=matrix(nrow=nrow(tab1),ncol=2)
for (j in 1:nrow(tab1)){
cor1=cor.test(tab1[j,],map1[,test_metadata],method=cor_method)
cor_mat[j,1]=cor1$estimate
cor_mat[j,2]=cor1$p.value
}
cor_mat=data.frame(cor_mat)
cor_mat$fdr=p.adjust(cor_mat[,2],method="fdr")
rownames(cor_mat)=rownames(tab1)
cor_mat=cor_mat[order(cor_mat[,3]),]
cor_mat=na.omit(cor_mat)
k=1
gplots1=list()
for (j in 1:nrow(cor_mat)){
if (cor_mat[j,3]<fdr_cutoff){
if(log_norm){
tab_s=log10(tab1+1)
xlab1="log10 (normalized abundance)"
}else{
tab_s=tab1
xlab1="normalized abundance"
}
map1$i=tab_s[rownames(cor_mat)[j],]
colnames(map1)[match(test_metadata,colnames(map1))]="test_metadata"
colnames(map1)[match(col_metadata,colnames(map1))]="col_metadata"
tax_name=paste0("p__",strsplit(rownames(cor_mat)[j],"--p__")[[1]][2])
if(nchar(tax_name)>60&nchar(tax_name)<100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_li=round(tax_l/2)
tax_name1=paste0(paste(tax_s[1:tax_li],collapse = ";"),"\n",paste(tax_s[(tax_li+1):tax_l],collapse = ";"))
}else if(nchar(tax_name)>=100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_name1=paste0(paste(tax_s[1:3],collapse = ";"),"\n",paste(tax_s[4:5],collapse = ";"),"\n",paste(tax_s[6:tax_l],collapse = ";"))
}else{
tax_name1=tax_name
}
if(cor_mat[j,3]<0.001){
wil_p=formatC(cor_mat[j,3], format = "e", digits = 2)
}else{
wil_p=formatC(cor_mat[j,3], digits = 3)
}
main1=paste(tax_name1,"\n"," rho =",round(cor_mat[j,1],3),"\n FDR =", wil_p,"\n")
g=ggscatter(map1, x = "i", y = "test_metadata",xlab = xlab1, ylab = test_metadata,
legend.title=col_metadata,font.x = c(10, "black"),font.y = c(10,  "black"), color = "col_metadata",palette = palette_group, size = 2,
add = "reg.line",add.params = list(color = "darkgrey", fill = "lightgray"),conf.int = TRUE,cor.coef = FALSE )
gplots1[[k]]=g+annotate(geom="text", x=min(map1$i)+sd(map1$i)*1.2, y=max(map1$test_metadata)-sd(map1$test_metadata)*0.5, label=main1,color="black",size=3)
k=k+1
}
}
length(gplots1)
ggarrange(gplots1,ncol = 2, nrow = 2)
??ggarrange
gplots1[[l1[1:2]]]
ggarrange(gplots1[[l1[1:3]]],ncol = 2, nrow = 2)
l1[1:3]
x1=ceiling(length(gplots1)/4)
if(page>x1){
stop("No taxa in this page!")
}
if(x1==0){
l1=c(1:length(gplots1))
}else{
if(page==x1){
l1=c((page*4-3):length(gplots1))
}else{
l1=c((page*4-3):(page*4))
}
}
l1
l1[1:3]
ggarrange(gplots1[[l1[1:3]]],ncol = 2, nrow = 2)
dev.off()
dev.off()
ggarrange(gplots1[[l1[1:3]]],ncol = 2, nrow = 2)
ggarrange(gplots1[[l1[1]]],gplots1[[l1[2]]],ncol = 2, nrow = 2)
gplots1[[l1]
]
l1
gplots1[[c(l1)]]
do.call('[',gplots1,1)
do.call('[[',gplots1,1)
gplots1[[1]]
gplots1[["1"]]
gplots1[[c(1,2)]]
gplots1[[c(1,3)]]
c(gplots1[[1]],gplots1[[3]])
c(gplots1[[1]])
?do.call
do.call("[[",gplots1)
ggarrange(plotlistgplots1[[l1[1:3]]],ncol = 2, nrow = 2)
ggarrange(plotlist=gplots1[[l1[1:3]]],ncol = 2, nrow = 2)
ggarrange(plotlist=gplots1[[l1],ncol = 2, nrow = 2)
ggarrange(plotlist=gplots1[[l1]],ncol = 2, nrow = 2)
ggarrange(plotlist=c(gplots1[[l1[1]]],gplots1[[l1[2]]]),ncol = 2, nrow = 2)
plot(c(1:10),c(1:10))
ggarrange(plotlist=c(gplots1[[l1[1]]],gplots1[[l1[2]]]),ncol = 2, nrow = 2)
ggarrange(plotlist=gplots1,ncol = 2, nrow = 2)
rsconnect::deployApp('/Users/shansun/git/plotmicrobiome')
rsconnect::deployApp('/Users/shansun/git/plotmicrobiome')
rsconnect::deployApp('/Users/shansun/git/plotmicrobiome')
rsconnect::deployApp('/Users/shansun/git/plotmicrobiome')
taxa_table = tab_s
metadata=metadata1
fdrs=fdrs1
tab=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[match(intersect(colnames(tab),rownames(metadata)),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
if(taxa_shown==""){
tab1=tab
fdrs1=fdrs
}else{
tab1=tab[grep(taxa_shown,rownames(tab)),]
fdrs1=fdrs[grep(taxa_shown,rownames(fdrs)),]
}
sig_l=length(which(fdrs1[,2]<cutoff))
tab1n=tab1[order(fdrs1[,2]),][1:sig_l,]
fdrs_s=sort(fdrs1[,2])[1:sig_l]
if(log_norm){
tab1n=log10(tab1n+1)
}
x1=ceiling(nrow(tab1n)/9)
if(page>x1){
stop("No taxa in this page!")
}
if(x1==0){
l1=c(1:nrow(tab1n))
}else{
if(page==x1){
l1=c((page*9-8):nrow(tab1n))
}else{
l1=c((page*9-8):(page*9))
}
}
l1
rownames(tab1n)
i=9
tax_name=paste0("p__",strsplit(rownames(tab1n)[i],"--p__")[[1]][2])
tax_name
nchar(tax_name)
strsplit(tax_name,"--")[[1]]
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_l
i=11
tax_name=paste0("p__",strsplit(rownames(tab1n)[i],"--p__")[[1]][2])
nchar(tax_name)
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
paste0(paste(tax_s[1:3],collapse = ";"),"\n",paste(tax_s[4:5],collapse = ";"),"\n",paste(tax_s[6:tax_l],collapse = ";"))
paste(tax_s[1:3],collapse = ";")
paste(tax_s[4:5],collapse = ";")
paste(tax_s[6:tax_l],collapse = ";")
tax_l
tax_s[6:tax_l]
i
tax_name=paste0("p__",strsplit(rownames(tab1n)[i],"--p__")[[1]][2])
if(nchar(tax_name)>60&nchar(tax_name)<100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_li=round(tax_l/2)
tax_name1=paste0(paste(tax_s[1:tax_li],collapse = ";"),"\n",paste(tax_s[(tax_li+1):tax_l],collapse = ";"))
}else if(nchar(tax_name)>=100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
if(tax_l==6){
tax_name1=paste0(paste(tax_s[1:3],collapse = ";"),"\n",paste(tax_s[4:5],collapse = ";"),"\n",paste(tax_s[6:tax_l],collapse = ";"))
}else{
tax_name1=paste0(paste(tax_s[1:3],collapse = ";"),"\n",paste(tax_s[4:5],collapse = ";"))
}
}else{
tax_name1=tax_name
}
tax_name1
rsconnect::deployApp('/Users/shansun/git/plotmicrobiome')
#' Build boxplots of alpha diversity
#' @keywords alpha-diversity, boxplots
#' @export
#' @examples
#'
#'
alpha_plot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,method = "wilcoxon",xlab_direction=1,palette_group=c("red","blue","orange","green")){
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
for (j in 2:7){
tab1n=tab1[which(tax_l==j),]
shannon=vegan::diversity(tab1n,index = "shannon", MARGIN = 2, base = exp(1))
simp=vegan::diversity(tab1n,index = "simpson", MARGIN = 2, base = exp(1))
invsimp=vegan::diversity(tab1n,index = "invsimpson", MARGIN = 2, base = exp(1))
num_species=vegan::specnumber(tab1n,  MARGIN = 2)
alpha_mat=cbind(shannon,simp,invsimp,num_species)
colnames(alpha_mat)=c("Shannon","Simpson","InverseSimpson","Num_taxa")
par(mfrow=c(6,4),mar=c(5,5,5,5))
for (i in 1:4){
if (method == "wilcoxon"){
wil_p1=try(wilcox.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "t.test"){
wil_p1=try(t.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "anova"){
wil_p1=try(summary(aov(as.numeric(alpha_mat[,i])~metadata[,test_metadata]))[[1]][1,5])
}else{
wil_p1=kruskal.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value
}
if(wil_p1<0.001){
wil_p=formatC(wil_p1, format = "e", digits = 2)
}else{
wil_p=formatC(wil_p1, digits = 2)
}
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(taxa_level,colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
stripchart(alpha_mat[,i]~metadata[,test_metadata],vertical = TRUE,  method = "jitter", add = TRUE, pch = 16, col = palette_group)
}
}
}
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",palette_group=c("red","blue","orange","green"))
#' Build boxplots of alpha diversity
#' @keywords alpha-diversity, boxplots
#' @export
#' @examples
#'
#'
alpha_plot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,method = "wilcoxon",xlab_direction=1,palette_group=c("red","blue","orange","green")){
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
for (j in 2:7){
tab1n=tab1[which(tax_l==j),]
shannon=vegan::diversity(tab1n,index = "shannon", MARGIN = 2, base = exp(1))
simp=vegan::diversity(tab1n,index = "simpson", MARGIN = 2, base = exp(1))
invsimp=vegan::diversity(tab1n,index = "invsimpson", MARGIN = 2, base = exp(1))
num_species=vegan::specnumber(tab1n,  MARGIN = 2)
alpha_mat=cbind(shannon,simp,invsimp,num_species)
colnames(alpha_mat)=c("Shannon","Simpson","InverseSimpson","Num_taxa")
par(mfrow=c(6,4),mar=c(5,5,5,5))
for (i in 1:4){
if (method == "wilcoxon"){
wil_p1=try(wilcox.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "t.test"){
wil_p1=try(t.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "anova"){
wil_p1=try(summary(aov(as.numeric(alpha_mat[,i])~metadata[,test_metadata]))[[1]][1,5])
}else{
wil_p1=kruskal.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value
}
if(wil_p1<0.001){
wil_p=formatC(wil_p1, format = "e", digits = 2)
}else{
wil_p=formatC(wil_p1, digits = 2)
}
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
stripchart(alpha_mat[,i]~metadata[,test_metadata],vertical = TRUE,  method = "jitter", add = TRUE, pch = 16, col = palette_group)
}
}
}
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",palette_group=c("red","blue","orange","green"))
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",palette_group=c("red","blue","orange","green"))
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",palette_group=c("red","blue","orange","green"))
runApp('plotmicrobiome')
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",palette_group=c("red","blue","orange","green"))
#' Build boxplots of alpha diversity
#' @keywords alpha-diversity, boxplots
#' @export
#' @examples
#'
#'
alpha_plot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,method = "wilcoxon",xlab_direction=1,palette_group=c("red","blue","orange","green")){
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
for (j in 2:7){
tab1n=tab1[which(tax_l==j),]
shannon=vegan::diversity(tab1n,index = "shannon", MARGIN = 2, base = exp(1))
simp=vegan::diversity(tab1n,index = "simpson", MARGIN = 2, base = exp(1))
invsimp=vegan::diversity(tab1n,index = "invsimpson", MARGIN = 2, base = exp(1))
num_species=vegan::specnumber(tab1n,  MARGIN = 2)
alpha_mat=cbind(shannon,simp,invsimp,num_species)
colnames(alpha_mat)=c("Shannon","Simpson","InverseSimpson","Num_taxa")
par(mfrow=c(6,4),mar=c(2,2,2,2))
for (i in 1:4){
if (method == "wilcoxon"){
wil_p1=try(wilcox.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "t.test"){
wil_p1=try(t.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "anova"){
wil_p1=try(summary(aov(as.numeric(alpha_mat[,i])~metadata[,test_metadata]))[[1]][1,5])
}else{
wil_p1=kruskal.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value
}
if(wil_p1<0.001){
wil_p=formatC(wil_p1, format = "e", digits = 2)
}else{
wil_p=formatC(wil_p1, digits = 2)
}
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
stripchart(alpha_mat[,i]~metadata[,test_metadata],vertical = TRUE,  method = "jitter", add = TRUE, pch = 16, col = palette_group)
}
}
}
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",palette_group=c("red","blue","orange","green"))
#' Build boxplots of alpha diversity
#' @keywords alpha-diversity, boxplots
#' @export
#' @examples
#'
#'
alpha_plot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,method = "wilcoxon",xlab_direction=1,palette_group=c("red","blue","orange","green")){
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
par(mfrow=c(6,4),mar=c(2,2,2,2))
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
for (j in 2:7){
tab1n=tab1[which(tax_l==j),]
shannon=vegan::diversity(tab1n,index = "shannon", MARGIN = 2, base = exp(1))
simp=vegan::diversity(tab1n,index = "simpson", MARGIN = 2, base = exp(1))
invsimp=vegan::diversity(tab1n,index = "invsimpson", MARGIN = 2, base = exp(1))
num_species=vegan::specnumber(tab1n,  MARGIN = 2)
alpha_mat=cbind(shannon,simp,invsimp,num_species)
colnames(alpha_mat)=c("Shannon","Simpson","InverseSimpson","Num_taxa")
for (i in 1:4){
if (method == "wilcoxon"){
wil_p1=try(wilcox.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "t.test"){
wil_p1=try(t.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "anova"){
wil_p1=try(summary(aov(as.numeric(alpha_mat[,i])~metadata[,test_metadata]))[[1]][1,5])
}else{
wil_p1=kruskal.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value
}
if(wil_p1<0.001){
wil_p=formatC(wil_p1, format = "e", digits = 2)
}else{
wil_p=formatC(wil_p1, digits = 2)
}
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
stripchart(alpha_mat[,i]~metadata[,test_metadata],vertical = TRUE,  method = "jitter", add = TRUE, pch = 16, col = palette_group)
}
}
}
#alpha diversity boxplot
alpha_plot(taxa_table = tab_s, metadata=metadata1,test_metadata="Case_Ctrl",palette_group=c("red","blue","orange","green"))
rsconnect::deployApp('/Users/shansun/git/plotmicrobiome')
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",cex.lab=2,xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
par(mfrow=c(6,4),mar=c(5,5,5,5))
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
for (j in 2:7){
tab1n=tab1[which(tax_l==j),]
shannon=vegan::diversity(tab1n,index = "shannon", MARGIN = 2, base = exp(1))
simp=vegan::diversity(tab1n,index = "simpson", MARGIN = 2, base = exp(1))
invsimp=vegan::diversity(tab1n,index = "invsimpson", MARGIN = 2, base = exp(1))
num_species=vegan::specnumber(tab1n,  MARGIN = 2)
alpha_mat=cbind(shannon,simp,invsimp,num_species)
colnames(alpha_mat)=c("Shannon","Simpson","InverseSimpson","Num_taxa")
for (i in 1:4){
if (method == "wilcoxon"){
wil_p1=try(wilcox.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "t.test"){
wil_p1=try(t.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "anova"){
wil_p1=try(summary(aov(as.numeric(alpha_mat[,i])~metadata[,test_metadata]))[[1]][1,5])
}else{
wil_p1=kruskal.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value
}
if(wil_p1<0.001){
wil_p=formatC(wil_p1, format = "e", digits = 2)
}else{
wil_p=formatC(wil_p1, digits = 2)
}
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",cex.lab=2,xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
stripchart(alpha_mat[,i]~metadata[,test_metadata],vertical = TRUE,  method = "jitter", add = TRUE, pch = 16, col = palette_group)
}
}
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",cex.lab=2,xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
par(mfrow=c(2,2))
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",cex.lab=2,xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",cex.lab=1.5,xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",cex.lab=1.5,cex.axis=1.5,xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
rsconnect::deployApp('/Users/shansun/git/plotmicrobiome')
