tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 4,max.overlaps=20)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
icor1[i,1]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$estimate
cor1[i,2]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$p.value
}
dev.off()
colnames(cor1)=c("rho","P")
rownames(cor1)=c("model1","model2","model3","model4")
write.csv(cor1,file="./update/corplot_model.csv")
#Fig.3
fdrs=r_all[,seq(3,32,4)]
fdrs=apply(fdrs,2,as.numeric)
tVals=r_all[,seq(1,32,4)]
tVals=apply(tVals,2,as.numeric)
pVals_log=data.frame(-log10(fdrs)*sign(tVals))
rownames(pVals_log)=rownames(r_all)
cor1=matrix(nrow=4,ncol=2)
pdf("./update/corplot_model.pdf",height =8, width=8,onefile=T)
for (i in 1:4){
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.5, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 4,max.overlaps=20)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
cor1[i,1]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$estimate
cor1[i,2]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$p.value
}
dev.off()
colnames(cor1)=c("rho","P")
rownames(cor1)=c("model1","model2","model3","model4")
write.csv(cor1,file="./update/corplot_model.csv")
i=2
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.5, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 4,max.overlaps=10)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
pdf("./update/corplot_model.pdf",height =8, width=8,onefile=T)
for (i in 1:4){
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.5, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 3,max.overlaps=20)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
cor1[i,1]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$estimate
cor1[i,2]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$p.value
}
dev.off()
warnings()
pdf("./update/corplot_model.pdf",height =8, width=8,onefile=T)
for (i in 1:4){
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.5, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 3,max.overlaps=15)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
cor1[i,1]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$estimate
cor1[i,2]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$p.value
}
dev.off()
warnings()
pdf("./update/corplot_model.pdf",height =8, width=8,onefile=T)
for (i in 1:4){
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.5, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 2,max.overlaps=18)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
cor1[i,1]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$estimate
cor1[i,2]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$p.value
}
dev.off()
pdf("./update/corplot_model.pdf",height =8, width=8,onefile=T)
for (i in 1:4){
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.8, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 3,max.overlaps=18)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
cor1[i,1]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$estimate
cor1[i,2]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$p.value
}
dev.off()
warnings()
pdf("./update/corplot_model.pdf",height =8, width=8,onefile=T)
for (i in 1:4){
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.6, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 3,max.overlaps=20)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
cor1[i,1]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$estimate
cor1[i,2]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$p.value
}
dev.off()
warnings()
i=2
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
na.omit(tax_lab1)
i
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.6, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 3,max.overlaps=20)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
fdrs=r_all[,seq(3,32,4)]
fdrs=apply(fdrs,2,as.numeric)
tVals=r_all[,seq(1,32,4)]
tVals=apply(tVals,2,as.numeric)
pVals_log=data.frame(log10(fdrs)*sign(tVals))
rownames(pVals_log)=rownames(r_all)
cor1=matrix(nrow=4,ncol=2)
pdf("./update/corplot_model.pdf",height =8, width=8,onefile=T)
for (i in 1:4){
p=ggplot(pVals_log, mapping=aes_string(x=colnames(pVals_log)[i*2-1], y=colnames(pVals_log)[i*2]))+ ylim(-1.6, 1.5)+ xlim(-1, 1) +geom_point(color = 'red')+ theme_classic(base_size = 20) + labs(title="Comparison of ASC and DES",x ="ASC -log10(FDR)*direction" , y = "DES -log10(FDR)*direction")
tax_lab=rownames(pVals_log)
tax_lab1=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)]})
tax_lab2=sapply(strsplit(tax_lab,"--"),function(i){i[length(i)-1]})
tax_lab1[which(tax_lab1=="__")]=paste0(tax_lab2[which(tax_lab1=="__")],"__unclassified")
tax_lab1[which(fdrs[,i*2-1]>0.1 & fdrs[,i*2]>0.1)]=NA
p2=p+geom_text_repel(aes(label =tax_lab1),size = 3,max.overlaps=20)+geom_vline(xintercept=0, linetype="dotted")+geom_hline(yintercept=0, linetype="dotted")
print(p2)
cor1[i,1]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$estimate
cor1[i,2]=cor.test(pVals_log[,i*2-1],pVals_log[,i*2],method="spearman")$p.value
}
dev.off()
colnames(cor1)=c("rho","P")
rownames(cor1)=c("model1","model2","model3","model4")
write.csv(cor1,file="./update/corplot_model.csv")
a=read.csv(file="/Users/shansun/git/MicroscopicColitisMicrobiome/output/lmer_all_models_sig_results.csv")
head(a)
match(a[,1],rownames(r_all))
r1=r_all[match(a[,1],rownames(r_all)),]
write.csv(r1,file="./update/lmer_merged_models_results.csv")
a[1,1]
colnames(a)
a=a[order(a[,19]),]
r1=r_all[match(a[,1],rownames(r_all)),]
rownames(r1)
a[3,1]
a[2,1]
a[,1]
a[,1]
dim(r1)
dim(a)
a=a[order(a[,19]),]
r1=r_all[match(a[,1],rownames(r_all)),]
write.csv(r1,file="./update/lmer_merged_models_results.csv")
colnames(a)[19]
runApp('~/git/plotmicrobiome')
length(which(fdrs[,5]<0.1))
length(which(fdrs[,6]<0.1))
dim(metadata_c1)
dim(metadata1_s)
table(metadata1_s)
table(metadata1_s$antibiotic)
table(paste(metadata1_s$antibiotic,metadata1_s$Case_Ctrl))
52*0.29
153*0.47
table(paste(metadata1_s$ppi,metadata1_s$Case_Ctrl))
63/152
63/153
nchar("TACGTAGGTGGCAAGCGTTATCCGGAATGATTGGGCGTAAAGGGTGCGCAGGCGGCGTGCCAAGTCTGAAGTGAAAGGTACAGGCTCAACCTGTACAGGCTTTGGAAACTGGCACGCTCGGGGACAGGAGAGGGCGGTGGAACTCCATGTG")
runApp('~/git/plotmicrobiome')
#GMN19 vs exp1 and 2
taxa_tab1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/LutherJan2019/new/biom-with-taxonomy.biom",biom=T,onefile = T,ASV=T)
#GMN19 vs exp1 and 2
taxa_tab1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/LutherJan2019/new/dada2/biom-with-taxonomy.biom",biom=T,onefile = T,ASV=T)
taxa_tab2=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/new/se/dada2/biom-with-taxonomy.biom",biom=T,onefile = T,ASV=T)
colnames(taxa_tab2)
rownames(taxa_tab1)
intersect(colnames(taxa_tab2),colnames(taxa_tab1))
colnames(taxa_tab2)[1:5]
rownames(taxa_tab2)[1:5]
intersect(rownames(taxa_tab2),rownames(taxa_tab1))
setdiff(rownames(taxa_tab2),rownames(taxa_tab1))
setdiff(rownames(taxa_tab2),rownames(taxa_tab1))[1:10]
setdiff(rownames(taxa_tab1),rownames(taxa_tab2))[1:10]
#GMN19 vs exp1 and 2
taxa_tab1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/LutherJan2019/new/dada2/biom-with-taxonomy.biom",biom=T,onefile = T,ASV=T)
intersect(rownames(taxa_tab2),rownames(taxa_tab1))
length(intersect(rownames(taxa_tab2),rownames(taxa_tab1)))
setdiff(rownames(taxa_tab1),rownames(taxa_tab2))[1:10]
setdiff(rownames(taxa_tab2),rownames(taxa_tab1))[1:10]
length(intersect(rownames(taxa_tab2),rownames(taxa_tab1)))
taxa_tab3=merge(taxa_tab1,taxa_tab2,by=0)
dim(taxa_tab3)
head(taxa_tab3)
taxa_tab2=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",biom=F,onefile = T,ASV=T)
length(intersect(rownames(taxa_tab2),rownames(taxa_tab1)))
taxa_tab3=merge(taxa_tab1,taxa_tab2,by=0)
dim(taxa_tab3)
head(taxa_tab3)
write.csv(taxa_tab3,file="/Users/shansun/Google\ Drive/bartelt/LutherJan2019/new/dada2/all_merged.csv")
runApp('~/git/plotmicrobiome')
format_asv
taxa_tab5=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/LutherJan2019/new/dada2/all_merged.csv",biom=F,onefile = T,ASV=F)
head(taxa_tab5)
taxa_tab5=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/LutherJan2019/new/dada2/all_merged.csv",biom=F,onefile = T,ASV=F,sep=",")
colSums(taxa_tab3)
taxa_tab3[1:5,1:5]
rownames(taxa_tab3)=taxa_tab3[,1]
taxa_tab3=taxa_tab3[,-1]
taxa_tab3[1:5,1:5]
write.csv(taxa_tab3,file="/Users/shansun/Google\ Drive/bartelt/LutherJan2019/new/dada2/all_merged.csv")
taxa_tab5=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/LutherJan2019/new/dada2/all_merged.csv",biom=F,onefile = T,ASV=F,sep=",")
taxa_tab5[1:5,1:5]
runApp('~/git/plotmicrobiome')
runApp('~/git/plotmicrobiome')
taxa_table1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/cafe2/dada2/biom-with-taxonomy.biom",biom=T,onefile = T,ASV=T)
metadata1=meta_format(metadata="/Users/shansun/Google\ Drive/cafe2/CAF_metadata.csv",metadata_sep=",",meta_sample_name_col=1)
head(metadata1)
taxa_table1[1;5,1:5]
taxa_table1[1:5,1:5]
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="Day",stratify_by_value="30-d",prevalence_cutoff = 0.25,exclude_ASV = T)
metadata1=meta_format(metadata="/Users/shansun/Google\ Drive/cafe2/CAF_metadata.csv",metadata_sep=",",meta_sample_name_col=1)
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="Day",stratify_by_value="30-d",prevalence_cutoff = 0.25,exclude_ASV = T)
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="NLR_1",col_metadata="Group",fdr_cutoff=0.1)
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="Day",stratify_by_value="30-d",prevalence_cutoff = 0.25,exclude_ASV = T)
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="NLR_1",col_metadata="Group",fdr_cutoff=0.1)
taxa_table =tab_s
metadata=metadata1
test_metadata="NLR_1"
col_metadata="Group"
metadata[which(!is.na(metadata[[test_metadata]])),]
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
map1=metadata[intersect(colnames(tab1),rownames(metadata)),]
cor_mat=matrix(nrow=nrow(tab1),ncol=2)
for (j in 1:nrow(tab1)){
cor1=cor.test(tab1[j,],map1[,test_metadata],method=cor_method)
cor_mat[j,1]=cor1$estimate
cor_mat[j,2]=cor1$p.value
}
tab1
colnames(taxa_table)
rownames(metadata)
colnames(taxa_table1)
tab_s=table_subset(taxa_table = taxa_table1,metadata=metadata1,stratify_by_metadata="Day",stratify_by_value="30-d",prevalence_cutoff = 0.25,exclude_ASV = T)
colnames(tab_s)
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="NLR_1",col_metadata="Group",fdr_cutoff=0.1)
taxa_table =tab_s
metadata=metadata[which(!is.na(metadata[[test_metadata]])),]
if (col_metadata!=""){
metadata=metadata[which(!is.na(metadata[[col_metadata]])),]
}
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
map1=metadata[intersect(colnames(tab1),rownames(metadata)),]
cor_mat=matrix(nrow=nrow(tab1),ncol=2)
for (j in 1:nrow(tab1)){
cor1=cor.test(tab1[j,],map1[,test_metadata],method=cor_method)
cor_mat[j,1]=cor1$estimate
cor_mat[j,2]=cor1$p.value
}
cor_method="spearman"
cor_mat=matrix(nrow=nrow(tab1),ncol=2)
for (j in 1:nrow(tab1)){
cor1=cor.test(tab1[j,],map1[,test_metadata],method=cor_method)
cor_mat[j,1]=cor1$estimate
cor_mat[j,2]=cor1$p.value
}
tab1[j,]
map1[,test_metadata]
map1[,test_metadata]=as.numeric(map1[,test_metadata])
map1[,test_metadata]
#' Scatter plots of individual taxa with selected metadata
#' colored by selected groups
#' with correlation stats
#' @keywords taxa, correlation
#' @export
#' @examples
#'
meta_corplot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,one_level=F,col_metadata="",page=1,log_norm=T,fdr_cutoff=0.1,cor_method="spearman",taxa_shown="",palette_group=c("red","blue","orange","green")){
metadata=metadata[which(!is.na(metadata[[test_metadata]])),]
if (col_metadata!=""){
metadata=metadata[which(!is.na(metadata[[col_metadata]])),]
}
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
map1=metadata[intersect(colnames(tab1),rownames(metadata)),]
map1[,test_metadata]=as.numeric(map1[,test_metadata])
cor_mat=matrix(nrow=nrow(tab1),ncol=2)
for (j in 1:nrow(tab1)){
cor1=cor.test(tab1[j,],map1[,test_metadata],method=cor_method)
cor_mat[j,1]=cor1$estimate
cor_mat[j,2]=cor1$p.value
}
cor_mat=data.frame(cor_mat)
cor_mat$fdr=p.adjust(cor_mat[,2],method="fdr")
rownames(cor_mat)=rownames(tab1)
cor_mat=cor_mat[order(cor_mat[,3]),]
cor_mat=na.omit(cor_mat)
if(taxa_shown==""){
tab1=tab1
cor_mat=cor_mat
}else{
tab1=tab1[grep(taxa_shown,rownames(tab1)),]
cor_mat=cor_mat[grep(taxa_shown,rownames(cor_mat)),]
}
k=1
gplots1=list()
if(nrow(cor_mat)==1){
if (as.numeric(cor_mat[1,3])<fdr_cutoff){
if(log_norm){
tab_s=log10(tab1+1)
xlab1="log10 (normalized abundance)"
}else{
tab_s=tab1
xlab1="normalized abundance"
}
map1$i=tab_s
colnames(map1)[match(test_metadata,colnames(map1))]="test_metadata"
if(col_metadata!=""){
colnames(map1)[match(col_metadata,colnames(map1))]="col_metadata"
}
if(one_level){
tax_name1=rownames(cor_mat)
}else{
tax_name=paste0("p__",strsplit(rownames(cor_mat),"--p__")[[1]][2])
if(nchar(tax_name)>60&nchar(tax_name)<100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_li=round(tax_l/2)
tax_name1=paste0(paste(tax_s[1:tax_li],collapse = ";"),"\n",paste(tax_s[(tax_li+1):tax_l],collapse = ";"))
}else if(nchar(tax_name)>=100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
if(tax_l>5){
tax_name1=paste0(paste(tax_s[1:3],collapse = ";"),"\n",paste(tax_s[4:5],collapse = ";"),"\n",paste(tax_s[6:tax_l],collapse = ";"))
}else{
tax_name1=paste0(paste(tax_s[1:2],collapse = ";"),"\n",paste(tax_s[3:4],collapse = ";"),"\n",paste(tax_s[5],collapse = ";"))
}
}else{
tax_name1=tax_name
}
}
if(cor_mat[1,2]<0.001){
wil_p=formatC(cor_mat[1,2], format = "e", digits = 2)
}else{
wil_p=formatC(cor_mat[1,2], digits = 3)
}
if(cor_mat[1,3]<0.001){
wil_fdr=formatC(cor_mat[1,3], format = "e", digits = 2)
}else{
wil_fdr=formatC(cor_mat[1,3], digits = 3)
}
main1=paste(tax_name1,"\n"," rho =",round(cor_mat[1,1],3),"\n P =", wil_p,"\n FDR =", wil_fdr,"\n")
if (col_metadata!=""){
g=ggscatter(map1, x = "i", y = "test_metadata",xlab = xlab1, ylab = test_metadata,
legend.title=col_metadata,font.x = c(10, "black"),font.y = c(10,  "black"), color = "col_metadata",palette = palette_group, size = 2,
add = "reg.line",add.params = list(color = "darkgrey", fill = "lightgray"),conf.int = TRUE,cor.coef = FALSE )
}else{
g=ggscatter(map1, x = "i", y = "test_metadata",xlab = xlab1, ylab = test_metadata,
font.x = c(10, "black"),font.y = c(10,  "black"),col = palette_group, size = 2,
add = "reg.line",add.params = list(color = "darkgrey", fill = "lightgray"),conf.int = TRUE,cor.coef = FALSE )
}
gplots1[[1]]=g+annotate(geom="text", x=min(map1$i)+sd(map1$i)*1.3, y=max(map1$test_metadata)-sd(map1$test_metadata)*0.5, label=main1,color="black",size=3)
}
}else{
for (j in 1:nrow(cor_mat)){
if (as.numeric(cor_mat[j,3])<fdr_cutoff){
if(log_norm){
tab_s=log10(tab1+1)
xlab1="log10 (normalized abundance)"
}else{
tab_s=tab1
xlab1="normalized abundance"
}
map1$i=tab_s[rownames(cor_mat)[j],]
colnames(map1)[match(test_metadata,colnames(map1))]="test_metadata"
if(col_metadata!=""){
colnames(map1)[match(col_metadata,colnames(map1))]="col_metadata"
}
if(one_level){
tax_name1=rownames(cor_mat)[j]
}else{
tax_name=paste0("p__",strsplit(rownames(cor_mat)[j],"--p__")[[1]][2])
if(nchar(tax_name)>60&nchar(tax_name)<100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
tax_li=round(tax_l/2)
tax_name1=paste0(paste(tax_s[1:tax_li],collapse = ";"),"\n",paste(tax_s[(tax_li+1):tax_l],collapse = ";"))
}else if(nchar(tax_name)>=100){
tax_s=strsplit(tax_name,"--")[[1]]
tax_l=length(tax_s)
if(tax_l>5){
tax_name1=paste0(paste(tax_s[1:3],collapse = ";"),"\n",paste(tax_s[4:5],collapse = ";"),"\n",paste(tax_s[6:tax_l],collapse = ";"))
}else{
tax_name1=paste0(paste(tax_s[1:2],collapse = ";"),"\n",paste(tax_s[3:4],collapse = ";"),"\n",paste(tax_s[5:tax_l],collapse = ";"))
}
}else{
tax_name1=tax_name
}
}
if(as.numeric(cor_mat[1,2])<0.001){
wil_p=formatC(cor_mat[1,2], format = "e", digits = 2)
}else{
wil_p=formatC(cor_mat[1,2], digits = 3)
}
if(as.numeric(cor_mat[1,3])<0.001){
wil_fdr=formatC(cor_mat[1,3], format = "e", digits = 2)
}else{
wil_fdr=formatC(cor_mat[1,3], digits = 3)
}
main1=paste(tax_name1,"\n"," rho =",round(cor_mat[1,1],3),"\n P =", wil_p,"\n FDR =", wil_fdr,"\n")
if (col_metadata!=""){
g=ggscatter(map1, x = "i", y = "test_metadata",xlab = xlab1, ylab = test_metadata,
legend.title=col_metadata,font.x = c(10, "black"),font.y = c(10,  "black"), color = "col_metadata",palette = palette_group, size = 2,
add = "reg.line",add.params = list(color = "darkgrey", fill = "lightgray"),conf.int = TRUE,cor.coef = FALSE )
}else{
g=ggscatter(map1, x = "i", y = "test_metadata",xlab = xlab1, ylab = test_metadata,
font.x = c(10, "black"),font.y = c(10,  "black"),col = palette_group, size = 2,
add = "reg.line",add.params = list(color = "darkgrey", fill = "lightgray"),conf.int = TRUE,cor.coef = FALSE )
}
gplots1[[k]]=g+annotate(geom="text", x=min(map1$i)+sd(map1$i)*1.3, y=max(map1$test_metadata)-sd(map1$test_metadata)*0.5, label=main1,color="black",size=3)
k=k+1
}
}
}
if (length(gplots1)==0){
message("No Significant hits! Try to increase the FDR cutoff.")
}
x1=ceiling(length(gplots1)/4)
if(page>x1){
stop("No taxa in this page!")
}
if(x1==0){
l1=c(1:length(gplots1))
}else{
if(page==x1){
l1=c((page*4-3):length(gplots1))
}else{
l1=c((page*4-3):(page*4))
}
}
ggarrange(gplots1[[l1[1]]],gplots1[[l1[2]]],gplots1[[l1[3]]],gplots1[[l1[4]]],ncol = 2, nrow = 2)
}
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="NLR_1",col_metadata="Group",fdr_cutoff=0.1)
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="NLR_1",col_metadata="Group",fdr_cutoff=0.3)
colnames(metadata1)
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="NLR_2",col_metadata="Group",fdr_cutoff=0.3)
dev.off()
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="NLR_2",col_metadata="Group",fdr_cutoff=0.1)
cor_plot1
dev.off()
dev.off()
cor_plot1
cor_plot1=meta_corplot(taxa_table =tab_s, metadata=metadata1,test_metadata="NOIC_1",col_metadata="Group",fdr_cutoff=0.1)
cor_plot1
runApp('~/git/plotmicrobiome')
runApp('~/git/plotmicrobiome')
runApp('~/git/plotmicrobiome')
runApp('~/git/plotmicrobiome')
runApp('~/git/plotmicrobiome')
head(metadata1)
boxplot(metadata1$NLR_1[which(metadata1$Day=="30-d")]~metadata1$Group_Day[which(metadata1$Day=="30-d")])
metadata1$NLR_1[which(metadata1$Day=="30-d")]
boxplot(as.numeric(metadata1$NLR_1[which(metadata1$Day=="30-d")])~metadata1$Group_Day[which(metadata1$Day=="30-d")])
wilcox.test(as.numeric(metadata1$NLR_1[which(metadata1$Day=="30-d")])~metadata1$Group_Day[which(metadata1$Day=="30-d")])
t.test(as.numeric(metadata1$NLR_1[which(metadata1$Day=="30-d")])~metadata1$Group_Day[which(metadata1$Day=="30-d")])
t.test(as.numeric(metadata1$NLR_2[which(metadata1$Day=="30-d")])~metadata1$Group_Day[which(metadata1$Day=="30-d")])
colnames(metadata1)
t.test(as.numeric(metadata1$NOIC_1[which(metadata1$Day=="30-d")])~metadata1$Group_Day[which(metadata1$Day=="30-d")])
t.test(as.numeric(metadata1$NOIC_2[which(metadata1$Day=="30-d")])~metadata1$Group_Day[which(metadata1$Day=="30-d")])
gc()
gc()
a=read.table(file="/Users/shansun/Google\ Drive/Barnes/220531_UNC41-A00434_0481_BH3CFJDRX2-BARNES.bracken.biom.txt",sep="\t",row.names=1,header = T)
colnames(a)
a=read.table(file="/Users/shansun/Google\ Drive/Barnes/220531_UNC41-A00434_0481_BH3CFJDRX2-BARNES.bracken.biom.txt",sep="\t",row.names=1,header = T,quote="")
colnames(a)
a=read.table(file="/Users/shansun/Google\ Drive/Barnes/220531_UNC41-A00434_0481_BH3CFJDRX2-BARNES.bracken.biom.txt",sep="\t",row.names=1,header = T,quote="",check.names = FALSE)
colnames(a)
sapply(strsplit(colnames(a),"_"),"[[",1)
paste(sapply(strsplit(colnames(a),"_"),"[[",1),sapply(strsplit(colnames(a),"_"),"[[",2),sep="_")
colnames(a)=paste(sapply(strsplit(colnames(a),"_"),"[[",1),sapply(strsplit(colnames(a),"_"),"[[",2),sep="_")
write.csv(a,file="/Users/shansun/Google\ Drive/Barnes/bracken.csv")
a=read.table(file="/Users/shansun/Google\ Drive/Barnes/220531_UNC41-A00434_0481_BH3CFJDRX2-BARNES.metaphlan.biom.txt",sep="\t",row.names=1,header = T,quote="",check.names = FALSE)
colnames(a)=paste(sapply(strsplit(colnames(a),"_"),"[[",1),sapply(strsplit(colnames(a),"_"),"[[",2),sep="_")
write.csv(a,file="/Users/shansun/Google\ Drive/Barnes/metaphlan2.csv")
a=read.table(file="/Users/shansun/Google\ Drive/Barnes/220531_UNC41-A00434_0481_BH3CFJDRX2-BARNES.pathabundance.biom.txt",sep="\t",row.names=1,header = T,quote="",check.names = FALSE)
colnames(a)=paste(sapply(strsplit(colnames(a),"_"),"[[",1),sapply(strsplit(colnames(a),"_"),"[[",2),sep="_")
write.csv(a,file="/Users/shansun/Google\ Drive/Barnes/pathabundance.csv")
runApp('~/git/plotmicrobiome')
q()
