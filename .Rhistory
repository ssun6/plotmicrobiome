tab_all=t(sapply(by(tab,tax1,colSums),identity))
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
for (n in 3:7){
tax1=apply(tax_l[,1:n],1,function(i){paste(i,collapse=";")})
tab_n=t(sapply(by(tab,tax1,colSums),identity))
tab_n=tab_n[!rowSums(tab_n)==0,]
tab_n=t(t(tab_n)/colSums(tab_n))*mean(colSums(tab_n))
tab_all=rbind(tab_all,tab_n)
}
tax_asv_name=paste(apply(tax_l,1,function(i){paste(i,collapse=";")}),rownames(tab),sep=";")
tab_asv=tab[!rowSums(tab)==0,]
tab_asv=t(t(tab_asv)/colSums(tab_asv))*mean(colSums(tab_asv))
rownames(tab_asv)=tax_asv_name
tab_all=rbind(tab_all,tab_asv)
tab_all=tab_all[,order(colnames(tab_all))]
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}else if (biom & !ASV){
biom= rbiom::read.biom(taxa_file,tree=FALSE)
tab_all=as.matrix(biom$counts)
tab_all=tab_all[,order(colnames(tab_all))]
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}else{
message ("If the taxa abundance table was converted from biom file, please remove # from header")
tab_all=read.table(file=taxa_file,sep=sep,row.names=1,header = T,check.names=FALSE)
tab_all=tab_all[,order(colnames(tab_all))]
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}
}else{
if (biom){
file_list=list.files(taxa_file,pattern = ".biom")
for (f1 in file_list){
biom= rbiom::read.biom(paste0(taxa_file,"/",f1),tree=FALSE)
tab=as.matrix(biom$counts)
tab1=tab[,order(colnames(tab))]
tab1=tab1[!rowSums(tab1)==0,]
tab1=t(t(tab1)/colSums(tab1))*mean(colSums(tab1))
tab1=tab1[order(rowSums(tab1),decreasing = T),]
if (f1==file_list[1]){
tab_all=tab1
}else{
tab_all=rbind(tab_all,tab1)
}
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}
}else{
message ("If the taxa abundance table was converted from biom file, please remove # from header")
file_list=list.files(taxa_file)
for (f1 in file_list){
tab=read.table(file=paste0(taxa_file,"/",f1),sep=sep,row.names=1,header = T,check.names=FALSE)
tab1=tab[,order(colnames(tab))]
tab1=tab1[!rowSums(tab1)==0,]
tab1=t(t(tab1)/colSums(tab1))*mean(colSums(tab1))
tab1=tab1[order(rowSums(tab1),decreasing = T),]
if (f1==file_list[1]){
tab_all=tab1
}else{
tab_all=rbind(tab_all,tab1)
}
}
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}
}
rownames(tab_all)=taxa_edit(rownames(tab_all))
return(tab_all)
}
#mouse
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
taxa_table1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/new/se/dada2/biom-with-taxonomy.biom",biom=T,onefile = T,ASV=T)
colnames(taxa_table1)[16:163]=sapply(strsplit(colnames(taxa_table1)[16:163],"_"),"[[",1)
head(rownames(taxa_table1))
metadata1=meta_format(metadata="/Users/shansun/Google\ Drive/bartelt/new/meta2.txt",metadata_sep="\t",meta_sample_name_col=1)
#subset the abundance table to only include samples for test
tab_s=table_subset(taxa_table = taxa_tab1,metadata=metadata1,stratify_by_metadata="Study",stratify_by_value="Sugar")
#PCoA plot
mds_plot(taxa_table = taxa_table1, metadata=metadata1,test_metadata="Treatment",method_mds = "nmds",palette_group=c("red","blue","orange","green"),distance_type="bray",log_norm = T)
#PCoA plot
mds_plot(taxa_table = taxa_table1, metadata=metadata1,test_metadata="Treatment",method_mds = "pcoa",palette_group=c("red","blue","orange","green"),distance_type="bray",log_norm = T)
#alpha diversity boxplot
alpha_plot(taxa_table = taxa_table1, metadata=metadata1,test_metadata="Treatment",palette_group=c("red","blue","orange","green"))
#' Build boxplots of alpha diversity
#' @keywords alpha-diversity, boxplots
#' @export
#' @examples
#'
#'
alpha_plot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,test_metadata_order="default",one_level=FALSE,method = "wilcoxon",xlab_direction=1,palette_group=c("red","blue","orange","green")){
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
if(test_metadata_order[1]!="default"){
metadata[,test_metadata]=factor(metadata[,test_metadata],levels=test_metadata_order)
}
if(one_level){
shannon=vegan::diversity(tab1,index = "shannon", MARGIN = 2, base = exp(1))
simp=vegan::diversity(tab1,index = "simpson", MARGIN = 2, base = exp(1))
invsimp=vegan::diversity(tab1,index = "invsimpson", MARGIN = 2, base = exp(1))
num_species=vegan::specnumber(tab1,  MARGIN = 2)
alpha_mat=cbind(shannon,simp,invsimp,num_species)
colnames(alpha_mat)=c("Shannon","Simpson","InverseSimpson","Number")
par(mfrow=c(7,4),mar=c(5,5,5,5))
for (i in 1:4){
if (method == "wilcoxon"){
wil_p1=try(wilcox.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "t.test"){
wil_p1=try(t.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "anova"){
wil_p1=try(summary(aov(as.numeric(alpha_mat[,i])~metadata[,test_metadata]))[[1]][1,5])
}else{
wil_p1=kruskal.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value
}
if (is.na(wil_p1)){
wil_p=wil_p1
}else if(wil_p1<0.001){
wil_p=formatC(wil_p1, format = "e", digits = 2)
}else{
wil_p=formatC(wil_p1, digits = 2)
}
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",cex.lab=1.5,cex.axis=1.2,xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
stripchart(alpha_mat[,i]~metadata[,test_metadata],vertical = TRUE,  method = "jitter", add = TRUE, pch = 16, col = palette_group)
}
}else if (!one_level){
par(mfrow=c(7,4),mar=c(5,5,5,5))
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","ASV/strain")
level_n=c(1:8)
for (j in 2:max(tax_l)){
tab1n=tab1[which(tax_l==j),]
shannon=vegan::diversity(tab1n,index = "shannon", MARGIN = 2, base = exp(1))
simp=vegan::diversity(tab1n,index = "simpson", MARGIN = 2, base = exp(1))
invsimp=vegan::diversity(tab1n,index = "invsimpson", MARGIN = 2, base = exp(1))
num_species=vegan::specnumber(tab1n,  MARGIN = 2)
alpha_mat=cbind(shannon,simp,invsimp,num_species)
colnames(alpha_mat)=c("Shannon","Simpson","InverseSimpson","Num_taxa")
for (i in 1:4){
if (method == "wilcoxon"){
wil_p1=try(wilcox.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "t.test"){
wil_p1=try(t.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value)
}else if (method == "anova"){
wil_p1=try(summary(aov(as.numeric(alpha_mat[,i])~metadata[,test_metadata]))[[1]][1,5])
}else{
wil_p1=kruskal.test(as.numeric(alpha_mat[,i])~metadata[,test_metadata])$p.value
}
if (is.na(wil_p1)){
wil_p=wil_p1
}else if(wil_p1<0.001){
wil_p=formatC(wil_p1, format = "e", digits = 2)
}else{
wil_p=formatC(wil_p1, digits = 2)
}
boxplot(alpha_mat[,i]~metadata[,test_metadata],main=paste(level1[j],colnames(alpha_mat)[i],"P =",wil_p),border=palette_group,col="white",cex.lab=1.5,cex.axis=1.2,xlab=test_metadata,ylab=colnames(alpha_mat)[i],las=xlab_direction)
stripchart(alpha_mat[,i]~metadata[,test_metadata],vertical = TRUE,  method = "jitter", add = TRUE, pch = 16, col = palette_group)
}
}
}
}
#alpha diversity boxplot
alpha_plot(taxa_table = taxa_table1, metadata=metadata1,test_metadata="Treatment",palette_group=c("red","blue","orange","green"))
#taxa_barplot
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="Treatment",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1)
#' Boxplots of individual taxa with stats
#' @keywords individual taxa, boxplot, stats
#' @export
#' @examples
#'
library(RColorBrewer)
taxa_barplot=function(taxa_table = NULL, metadata=NULL,test_metadata=NULL,test_metadata_order="default",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1,palette_group="default"){
metadata=metadata[which(!is.na(metadata[,test_metadata])),]
tab1=taxa_table[,intersect(colnames(taxa_table),rownames(metadata))]
metadata=metadata[intersect(colnames(tab1),rownames(metadata)),]
metadata[,test_metadata]=factor(as.character(metadata[,test_metadata]))
metadata[,test_metadata]=droplevels(metadata[,test_metadata])
if(test_metadata_order!="default"){
metadata[,test_metadata]=factor(metadata[,test_metadata],levels=test_metadata_order)
}
tax_l=sapply(strsplit(rownames(tab1),"--"),function(i){length(i)})
level1=c("kingdom","phylum","class","order","family","genus","species","strain")
level_n=c(1:8)
tab1n=tab1[which(tax_l==level_n[match(taxa_level,level1)]),]
tab1n=t(t(tab1n)/colSums(tab1n))*100
tab1n=tab1n[order(rowSums(tab1n),decreasing = T),]
tab1n_c=data.frame(sapply(by(t(tab1n),metadata[,test_metadata],colMeans),identity))
if(length(palette_group)==1){
if(palette_group=="default"){
qual_col_pals = RColorBrewer::brewer.pal.info[brewer.pal.info$category == 'qual',]
col11=c("red","blue","green","orange","turquoise1","deeppink","black","royalblue","darkgreen","hotpink","darkcyan","goldenrod1","brown","grey","purple")
col_vector = c(col11,unlist(mapply(RColorBrewer::brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
palette_group=col_vector[1:(num_taxa+1)]
}else{
warning("More colors are needed")
}
}else{
palette_group=palette_group
}
tab1n_c=tab1n_c[!grepl("--__",rownames(tab1n_c)),]
tab1n_c=tab1n_c[!grepl("--.__uncultured",rownames(tab1n_c)),]
tab1n_c=tab1n_c[!grepl("--.__uncultured.bacterium",rownames(tab1n_c)),]
tab1n_c=tab1n_c[!grepl("--.__gut.metagenome",rownames(tab1n_c)),]
rownames(tab1n_c)=sapply(strsplit(rownames(tab1n_c),"--"),"[[",level_n[match(taxa_level,level1)])
if(num_taxa>nrow(tab1n_c)){
if(all(colSums(tab1n_c)==100)){
num_taxa=nrow(tab1n_c)
palette_group=palette_group[1:num_taxa]
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c)),col=rev(palette_group[1:num_taxa]),pch=15,bty="n",cex=legend_size)
}else{
other=100-colSums(tab1n_c)
tab1n_c2=rbind(tab1n_c,other)
rownames(tab1n_c2)[num_taxa+1]="Other"
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c2),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c2)),col=rev(palette_group[1:(num_taxa+1)]),pch=15,bty="n",cex=legend_size)
}
}else{
tab1n_c1=tab1n_c[1:num_taxa,]
other=100-colSums(tab1n_c1)
tab1n_c2=rbind(tab1n_c1,other)
rownames(tab1n_c2)[num_taxa+1]="Other"
par(mfrow=c(1,2))
barplot(as.matrix(tab1n_c2),col=palette_group,ylab="Percentage (%)",las=xlab_direction)
plot.new()
legend("left",rev(rownames(tab1n_c2)),col=rev(palette_group[1:(num_taxa+1)]),pch=15,bty="n",cex=legend_size)
}
}
#taxa_barplot
taxa_barplot(taxa_table = tab_s, metadata=metadata1,test_metadata="Treatment",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1)
#taxa_barplot
taxa_barplot(taxa_table = taxa_table1, metadata=metadata1,test_metadata="Treatment",num_taxa=10,taxa_level="phylum",xlab_direction=1,legend_size=1)
#taxa_barplot
taxa_barplot(taxa_table = taxa_table1, metadata=metadata1,test_metadata="Treatment",num_taxa=10,taxa_level="phylum",xlab_direction=2,legend_size=1)
runApp('/Users/shansun/git/plotmicrobiome')
#mouse
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
tab=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/biom-with-taxonomy.txt",sep="\t")
head(tab[,1:5])
#mouse
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
tab=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/biom-with-taxonomy.txt",sep="\t",row.names=1)
head(tab[,1:5])
#mouse
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
tab=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/biom-with-taxonomy.txt",sep="\t",row.names=1,header=T)
head(tab[,1:5])
#mouse
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
tab=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/biom-with-taxonomy.txt",sep="\t",row.names=1,header=T,check.names = FALSE)
head(tab[,1:5])
colnames(tab)
colnames(tab)[16:163]=sapply(strsplit(colnames(tab)[16:163],"_"),"[[",1)
colnames(tab)
write.table(tab,file="/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",sep="\t")
write.table(tab,file="/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",sep="\t",quote = F)
runApp('/Users/shansun/git/plotmicrobiome')
taxa_table1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",biom=F,onefile = T,ASV=T)
taxa_file = "/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt"
tab1=read.table(file=taxa_file,sep=sep,row.names=1,header = T,check.names=FALSE)
sep="\t"
tab1=read.table(file=taxa_file,sep=sep,row.names=1,header = T,check.names=FALSE)
tax1=as.character(tab1[,ncol(tab1)])
tab=tab1[,-ncol(tab1)]
tax_l=matrix(nrow=nrow(tab),ncol=7)
for (i in 1:nrow(tab)){
n=length(strsplit(tax1[i],"; ")[[1]])
tax_l[i,1:n]=strsplit(tax1[i],"; ")[[1]][1:n]
}
tax_l[is.na(tax_l)]="__"
tax1=apply(tax_l[,1:2],1,function(i){paste(i,collapse=";")})
tab_all=t(sapply(by(tab,tax1,colSums),identity))
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
for (n in 3:7){
tax1=apply(tax_l[,1:n],1,function(i){paste(i,collapse=";")})
tab_n=t(sapply(by(tab,tax1,colSums),identity))
tab_n=tab_n[!rowSums(tab_n)==0,]
tab_n=t(t(tab_n)/colSums(tab_n))*mean(colSums(tab_n))
tab_all=rbind(tab_all,tab_n)
}
tax_asv_name=paste(apply(tax_l,1,function(i){paste(i,collapse=";")}),rownames(tab),sep=";")
tab_asv=tab[!rowSums(tab)==0,]
tab_asv=t(t(tab_asv)/colSums(tab_asv))*mean(colSums(tab_asv))
rownames(tab_asv)=tax_asv_name
tab_all=rbind(tab_all,tab_asv)
tax_asv_name
dim(tab_asv)
length(tax_asv_name)
tax_asv_name=paste(apply(tax_l,1,function(i){paste(i,collapse=";")}),rownames(tab),sep=";")
_
_
tab1=read.table(file=taxa_file,sep=sep,row.names=1,header = T,check.names=FALSE)
tax1=as.character(tab1[,ncol(tab1)])
tab=tab1[,-ncol(tab1)]
tax_l=matrix(nrow=nrow(tab),ncol=7)
for (i in 1:nrow(tab)){
n=length(strsplit(tax1[i],"; ")[[1]])
tax_l[i,1:n]=strsplit(tax1[i],"; ")[[1]][1:n]
}
tax_l[is.na(tax_l)]="__"
tax1=apply(tax_l[,1:2],1,function(i){paste(i,collapse=";")})
tab_all=t(sapply(by(tab,tax1,colSums),identity))
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
for (n in 3:7){
tax1=apply(tax_l[,1:n],1,function(i){paste(i,collapse=";")})
tab_n=t(sapply(by(tab,tax1,colSums),identity))
tab_n=tab_n[!rowSums(tab_n)==0,]
tab_n=t(t(tab_n)/colSums(tab_n))*mean(colSums(tab_n))
tab_all=rbind(tab_all,tab_n)
}
tax_asv_name=paste(apply(tax_l,1,function(i){paste(i,collapse=";")}),rownames(tab),sep=";")
tab_asv=t(t(tab_asv)/colSums(tab_asv))*mean(colSums(tab_asv))
rownames(tab_asv)=tax_asv_name
tab_all=rbind(tab_all,tab_asv)
tab_all=tab_all[,order(colnames(tab_all))]
head(as.character(tab1[,ncol(tab1)]))
#mouse
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
tab=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/biom-with-taxonomy.txt",sep="\t",row.names=1,header=T,check.names = FALSE)
colnames(tab)
#mouse
#ASV table (biom) from DADA2 with the taxonomy listed as the last column
tab=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/biom-with-taxonomy.txt",sep="\t",row.names=1,header=T,check.names = FALSE)
colnames(tab)
colnames(tab)[16:163]=sapply(strsplit(colnames(tab)[16:163],"_"),"[[",1)
write.table(tab,file="/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",sep="\t",quote = F)
taxa_table1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",biom=F,onefile = T,ASV=T)
taxa_edit=function(list1){
list1=gsub("\\.D","--D",list1)
list1=gsub("\\.__","--__",list1)
list1=gsub("\\|",";",list1)
list1=gsub("; ","--",list1)
list1=gsub(";","--",list1)
list1=gsub(" ","_",list1)
list1=gsub("\\[","",list1)
list1=gsub("\\]","",list1)
list1=gsub(":","",list1)
list1=gsub("D_0","d",list1)
list1=gsub("D_1","p",list1)
list1=gsub("D_2","c",list1)
list1=gsub("D_3","o",list1)
list1=gsub("D_4","f",list1)
list1=gsub("D_5","g",list1)
list1=gsub("D_6","s",list1)
list1=gsub("\\(","_",list1)
list1=gsub("\\)","_",list1)
list1=gsub("\\'","",list1)
return(list1)
}
format_asv <- function(taxa_file = NULL,sep="\t",onefile=T,biom=T,ASV=T) {
if (onefile){
if (biom & ASV){
biom= rbiom::read.biom(taxa_file,tree=FALSE)
tab=as.matrix(biom$counts)
tax_l=biom$taxonomy
tax_l[tax_l==""]="__"
tax1=apply(tax_l[,1:2],1,function(i){paste(i,collapse=";")})
tab_all=t(sapply(by(tab,tax1,colSums),identity))
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
for (n in 3:7){
tax1=apply(tax_l[,1:n],1,function(i){paste(i,collapse=";")})
tab_n=t(sapply(by(tab,tax1,colSums),identity))
tab_n=tab_n[!rowSums(tab_n)==0,]
tab_n=t(t(tab_n)/colSums(tab_n))*mean(colSums(tab_n))
tab_all=rbind(tab_all,tab_n)
}
tax_asv=paste(apply(tax_l,1,function(i){paste(i,collapse=";")}),rownames(biom$taxonomy),sep=";")
tab_asv=tab
tab_asv=t(t(tab_asv)/colSums(tab_asv))*mean(colSums(tab_asv))
rownames(tab_asv)=tax_asv
tab_all=rbind(tab_all,tab_asv)
tab_all=tab_all[,order(colnames(tab_all))]
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}else if (!biom & ASV){
message ("If the taxa abundance table was converted from biom file, please remove # from header")
tab1=read.table(file=taxa_file,sep=sep,row.names=1,header = T,check.names=FALSE)
tax1=as.character(tab1[,ncol(tab1)])
tab=tab1[,-ncol(tab1)]
tax_l=matrix(nrow=nrow(tab),ncol=7)
for (i in 1:nrow(tab)){
n=length(strsplit(tax1[i],"; ")[[1]])
tax_l[i,1:n]=strsplit(tax1[i],"; ")[[1]][1:n]
}
tax_l[is.na(tax_l)]="__"
tax1=apply(tax_l[,1:2],1,function(i){paste(i,collapse=";")})
tab_all=t(sapply(by(tab,tax1,colSums),identity))
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
for (n in 3:7){
tax1=apply(tax_l[,1:n],1,function(i){paste(i,collapse=";")})
tab_n=t(sapply(by(tab,tax1,colSums),identity))
tab_n=tab_n[!rowSums(tab_n)==0,]
tab_n=t(t(tab_n)/colSums(tab_n))*mean(colSums(tab_n))
tab_all=rbind(tab_all,tab_n)
}
tax_asv_name=paste(apply(tax_l,1,function(i){paste(i,collapse=";")}),rownames(tab),sep=";")
tab_asv=tab
tab_asv=t(t(tab_asv)/colSums(tab_asv))*mean(colSums(tab_asv))
rownames(tab_asv)=tax_asv_name
tab_all=rbind(tab_all,tab_asv)
tab_all=tab_all[,order(colnames(tab_all))]
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}else if (biom & !ASV){
biom= rbiom::read.biom(taxa_file,tree=FALSE)
tab_all=as.matrix(biom$counts)
tab_all=tab_all[,order(colnames(tab_all))]
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}else{
message ("If the taxa abundance table was converted from biom file, please remove # from header")
tab_all=read.table(file=taxa_file,sep=sep,row.names=1,header = T,check.names=FALSE)
tab_all=tab_all[,order(colnames(tab_all))]
tab_all=tab_all[!rowSums(tab_all)==0,]
tab_all=t(t(tab_all)/colSums(tab_all))*mean(colSums(tab_all))
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}
}else{
if (biom){
file_list=list.files(taxa_file,pattern = ".biom")
for (f1 in file_list){
biom= rbiom::read.biom(paste0(taxa_file,"/",f1),tree=FALSE)
tab=as.matrix(biom$counts)
tab1=tab[,order(colnames(tab))]
tab1=tab1[!rowSums(tab1)==0,]
tab1=t(t(tab1)/colSums(tab1))*mean(colSums(tab1))
tab1=tab1[order(rowSums(tab1),decreasing = T),]
if (f1==file_list[1]){
tab_all=tab1
}else{
tab_all=rbind(tab_all,tab1)
}
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}
}else{
message ("If the taxa abundance table was converted from biom file, please remove # from header")
file_list=list.files(taxa_file)
for (f1 in file_list){
tab=read.table(file=paste0(taxa_file,"/",f1),sep=sep,row.names=1,header = T,check.names=FALSE)
tab1=tab[,order(colnames(tab))]
tab1=tab1[!rowSums(tab1)==0,]
tab1=t(t(tab1)/colSums(tab1))*mean(colSums(tab1))
tab1=tab1[order(rowSums(tab1),decreasing = T),]
if (f1==file_list[1]){
tab_all=tab1
}else{
tab_all=rbind(tab_all,tab1)
}
}
tab_all=tab_all[order(rowSums(tab_all),decreasing = T),]
}
}
rownames(tab_all)=taxa_edit(rownames(tab_all))
tab_all=tab_all[which(rowSums(tab_all)!=0),]
return(tab_all)
}
taxa_table1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",biom=F,onefile = T,ASV=T)
dim(taxa_table1)
head(taxa_table1)
tail(taxa_table1)
colSums(taxa_table1)
runApp('/Users/shansun/git/plotmicrobiome')
colnames(tab)
write.table(tab,file="/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",sep="\t",quote = F)
taxa_table1=format_asv(taxa_file = "/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",biom=F,onefile = T,ASV=T)
runApp('/Users/shansun/git/plotmicrobiome')
meta2=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/meta2.txt",sep="\t",row.names=1,header=T,check.names = FALSE)
head(meta2)
meta2$Treatment_Day=paste(meta2$Treatment,meta2$Day,sep="_")
head(meta2)
write.table(meta2,file="/Users/shansun/Google\ Drive/bartelt/new/meta2.txt",sep="\t",quote = F)
runApp('/Users/shansun/git/plotmicrobiome')
View(tab)
runApp('/Users/shansun/git/plotmicrobiome')
runApp('/Users/shansun/git/plotmicrobiome')
runApp('/Users/shansun/git/plotmicrobiome')
runApp('/Users/shansun/git/plotmicrobiome')
runApp('/Users/shansun/git/plotmicrobiome')
runApp('/Users/shansun/git/plotmicrobiome')
meta3=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/meta3.txt",sep="\t",row.names=1,header=T,check.names = FALSE)
head(meta3)
match(colnames(meta2),colnames(meta3))
meta3$Treatment_Day=paste(meta3$Treatment,meta3$Day,sep="_")
head(meta3)
match(colnames(meta2),colnames(meta3))
meta_23=rbind(meta2,meta3)
write.table(meta_23,file="/Users/shansun/Google\ Drive/bartelt/new/meta23.txt",sep="\t",quote = F)
runApp('/Users/shansun/git/plotmicrobiome')
runApp('/Users/shansun/git/plotmicrobiome')
library(BiocManager)
options(repos = BiocManager::repositories())
rsconnect::deployApp('/Users/shansun/git/plotmicrobiome')
grep("Mitochondria",rownames(tab))
rownames(tab)
dim9rownames(tab)
dim(tab)
grep("Mitochondria",tab[,164])
tab=tab[!grepl("Mitochondria",tab[,164]),]
write.table(tab,file="/Users/shansun/Google\ Drive/bartelt/new/all_tab.txt",sep="\t",quote = F)
tissue=read.table(file="/Users/shansun/Google\ Drive/bartelt/new/tissue.txt",sep="\t",row.names=1,header=T,check.names = FALSE)
head(tissue)
tissue$Sample_Treatment=paste(tissue$SampleType,tissue$Treatment,sep="_")
head(tissue)
write.table(tissue,file="/Users/shansun/Google\ Drive/bartelt/new/tissue.txt",sep="\t",quote = F)
